// -*- Mode: Java; indent-tabs-mode: t; tab-width: 4 -*-
// ---------------------------------------------------------------------------
// Multi-Phasic Applications: SquirrelJME
//     Copyright (C) 2013-2016 Steven Gawroriski <steven@multiphasicapps.net>
//     Copyright (C) 2013-2016 Multi-Phasic Applications <multiphasicapps.net>
// ---------------------------------------------------------------------------
// SquirrelJME is under the GNU General Public License v3+, or later.
// For more information see license.mkd.
// ---------------------------------------------------------------------------

package net.multiphasicapps.squirreljme.autointerpreter;

import java.util.ArrayList;
import java.util.List;

/**
 * This interface represents an execution engine which is used to execute
 * interpretive code generated by the JIT engine.
 *
 * @since 2016/10/11
 */
public abstract class ExecutionEngine
	implements Runnable
{
	/** Lock. */
	protected final Object lock =
		new Object();
	
	/** Processes within this engine. */
	protected final List<InterpreterProcess> processes =
		new ArrayList<>();
	
	/**
	 * Adds the specified process to this execution engine.
	 *
	 * @param __ip The given process.
	 * @throws IllegalArgumentException If the process belongs to another
	 * execution engine.
	 * @throws NullPointerException On null arguments.
	 * @since 2016/10/11
	 */
	public final void addProcess(InterpreterProcess __ip)
		throws IllegalArgumentException, NullPointerException
	{
		// Check
		if (__ip == null)
			throw new NullPointerException("NARG");
		
		// {@squirreljme.error EO04 The process belongs to another execution
		// engine.}
		if (__ip.engine() != this)
			throw new IllegalArgumentException("EO04");
		
		// Lock
		synchronized (this.lock)
		{
			this.processes.add(__ip);
		}
	}
}

