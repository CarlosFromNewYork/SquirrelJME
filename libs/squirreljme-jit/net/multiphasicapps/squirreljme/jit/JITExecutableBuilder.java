// -*- Mode: Java; indent-tabs-mode: t; tab-width: 4 -*-
// ---------------------------------------------------------------------------
// Multi-Phasic Applications: SquirrelJME
//     Copyright (C) Steven Gawroriski <steven@multiphasicapps.net>
//     Copyright (C) Multi-Phasic Applications <multiphasicapps.net>
// ---------------------------------------------------------------------------
// SquirrelJME is under the GNU General Public License v3+, or later.
// See license.mkd for licensing and copyright information.
// ---------------------------------------------------------------------------

package net.multiphasicapps.squirreljme.jit;

import java.util.ArrayList;
import java.util.List;
import net.multiphasicapps.squirreljme.executable.ExecutableClass;
import net.multiphasicapps.squirreljme.java.symbols.ClassNameSymbol;
import net.multiphasicapps.squirreljme.linkage.ClassFlags;

/**
 * This class is used to build executables generated by the JIT which may
 * later be serialized to the disk, combined to create the kernel, or may be
 * directly executed by the kernel after compilation.
 *
 * This class is not thread safe.
 *
 * @since 2017/02/04
 */
public class JITExecutableBuilder
{
	/** The name of this class. */
	volatile ClassNameSymbol _classname;
	
	/** The name of the super class. */
	volatile ClassNameSymbol _supername;
	
	/** Implemented interfaces. */
	volatile ClassNameSymbol[] _interfaces;
	
	/** The class flags. */
	volatile ClassFlags _flags;
	
	/**
	 * Builds the resulting output executable which may be used for execution.
	 *
	 * @return Builds the resulting executable.
	 * @since 2017/02/04
	 */
	public ExecutableClass build()
	{
		throw new Error("TODO");
	}
	
	/**
	 * Sets the flags for the class.
	 *
	 * @param __f The flags to use.
	 * @throws NullPointerException On null arguments.
	 * @since 2017/02/05
	 */
	public void setClassFlags(ClassFlags __f)
		throws NullPointerException
	{
		// Check
		if (__f == null)
			throw new NullPointerException("NARG");
			
		// Set
		this._flags = __f;
	}
	
	/**
	 * Sets the class name.
	 *
	 * @param __cn The class name.
	 * @throws NullPointerException On null arguments.
	 * @since 2017/02/05
	 */
	public void setClassName(ClassNameSymbol __cn)
		throws NullPointerException
	{
		// Check
		if (__cn == null)
			throw new NullPointerException("NARG");
		
		// Set
		this._classname = __cn;
	}
	
	/**
	 * The names of all implemented interfaces.
	 *
	 * @param __i The implemented interfaces.
	 * @throws NullPointerException On null arguments.
	 * @since 2017/02/05
	 */
	public void setInterfaceClassNames(ClassNameSymbol[] __i)
		throws NullPointerException
	{
		// Check
		if (__i == null)
			throw new NullPointerException("NARG");
		
		// Set
		this._interfaces = __i.clone();
	}
	
	/**
	 * Sets the super class name.
	 *
	 * @param __cn The super class name.
	 * @since 2017/02/05
	 */
	public void setSuperClassName(ClassNameSymbol __cn)
	{
		this._supername = __cn;
	}
}

