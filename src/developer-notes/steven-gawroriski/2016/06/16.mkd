# 2016/06/16

## 11:06

When it comes to `VMInterface`, there can be one that exists per process and
they could communicate with each other as such.

## 11:57

The `Class.getResourceAsStream()` operates on the JAR of the specified class.
This means that I need a dummy class in classes where resources exist so
that I can read the actual resources.

## 12:23

I should have a general mascot service of sorts. All the mascots will extend
the base class however the original high resolution images would be placed in
an original class. Then this way I can have a somewhat shared means of finding
images to use. The base resource lookup class can even handle decoding the
hexadecimal data and providing a binary stream.

## 13:33

Mascot images could actually be provided with the `ServiceLoader` so that a
format as required can be specified and such. Then the instances of the service
will be in the JAR so that `getResourceAsStream` would work there.

## 14:23

Never figured that I would have refactored the mascot projects other than
resorting.

## 15:10

I kind of just want to work on MEEP for a bit.

## 15:17

Then I can have some kind of interaction and I can take a break with
Squirrel Quarrel when desired.

## 15:27

Actually going into this, the application management services does exactly
what the launcher would need to do for the most part. So this means that my
previous launcher idea was a bit flawed anyway. So for the most part with these
interfaces, I will have to integrate them as such.

## 15:45

Actually one thing that I can do is have a host virtual environment. Unlike the
kernel, this would run the bytecode on the host system. It would not be
interpreted and use the pre-existing JVM. This would be a system that could be
used for testing or having a basic feel of the entire system as a whole.
Due to the requirement of there needing separated execution states, input JARs
would be read and their classes modified so that they are in their own unique
per-process (classpath) package.

## 16:00

This could actually work, it would be a kind of Para-Virtual Java Virtual
Machine which would run on Java SE systems. It could theoretically run on Java
5 however the code uses try-with-resources so that would not work much. The
PVM could implement SquirrelJME and I can work on it through that. Then once
the class library is complete I can perform native ports. The ports would need
minimal code to be implemented, so in theory I should never run into a TODO.

