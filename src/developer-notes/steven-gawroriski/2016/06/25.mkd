# 2016/06/25

## 09:04

I would need temporary filesystem usage for output blobs and other resources.

## 10:54

To reduce the binary size I can have a single shared global index that contains
constants and other references as such.

## 11:14

With combined blob tables however, all classes would have to use this given
table. However, when it comes to using individual classes everything that
exists in the table structure might not even be needed.

## 11:35

I would suppose that a blob of blobs containing class blobs and resources
should be used. This archive would just be a part of the executable. It would
essentially be a giant table of resource data and natively compiled classes
in sorted order. The bootstrapping system would setup a base JVM which can
run `JVM`, then `JVM` would setup a task for the launcher and the user uses
that for interaction. The archive would just be a flat binary for the most part
consisting of classes or resources in separated tables. I can then use a
modified UTF-8 comparison of sorts against a `String`.

## 13:24

So now that I have basic output, I must work on the SSJIT which takes an input
class and outputs a native blob. There will need to be some kind of
architecture generation class that the SSJIT can use. Since this can vary on
the system, I would suppose that the manifest should contain the class which
is the JIT to be used.

## 17:17

Actually, what I need is that interface that acts as a factory for a given
architecture. The `CodeProducerFactory` will be associated with an OS where it
extends a base factory for the architecture. Then this way, I can have
sub-variants of architectures (for example `powerpc32+g4` for a PowerMac G4).

## 18:56

I kind of dislike inner classes.

