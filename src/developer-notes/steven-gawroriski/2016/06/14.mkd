# 2016/06/14

## 08:34

I would suppose that processes should have their own unique structure manager
which is derived from the top level structure manager provided by the kernel or
interpreter. This way it is easier to tell which objects belong to a given
process along with having each process have their own set of objects which can
completley cleared when a process exits. The kernel itself can just use the
host object manager for the most part.

## 08:39

However when it comes to objects and the kernel itself, there can be a kind of
circularity so to speak. The field positions within objects are needed by the
dynamic compiler and the static compiler to know where fields and methods
are in relation to an object or class.

## 08:47

However, where I am going right now has to be adjusted. Currently all the
classes for a process would be reloaded along with their information. I need to
have it where a class could be derived from the kernel itself. So I suppose
what I need is a `RuntimeClassPath` which is very similar to `ClassPath`
except that classes provided by the kernel are shared among all processes. So
when a new class is requested it is not duplicated. Another thing to consider
are class units. Static class data does not really change much at all, just in
the dynamic linking information. I will need another similar thing to the
`ClassPath` except one that manages singular class units. So in the event that
a `ClassUnit` is shared amongst multiple processes, the information such as its
field alignments will already be known. The one thing that is not known however
would be the class base offset (for super classes).

