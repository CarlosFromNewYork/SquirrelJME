# 2016/09/18

## 00:04

API wise, it is very small which means it will be easier to implement. I can
have internally driver sets for it. Also due to the age of OpenGL it is more
targetted for older systems. So I could essentially dynamically load OpenGL
libraries potentially and use those for rendering. I would need to have a
driver interface that the standard code set uses. So I would essentially have
a software rasterizer, but for example on the N64 I can have a driver which
uses that GPU.

## 00:08

The `sloccount` of the JD disassembled classes (they are virtually all
interfaces and abstract classes) is only 1,273 lines. So the API itself is
very small indeed. However, I may be getting a bit ahead of myself a bit since
I do not even have a fully working compiler yet.

## 00:12

Since JD's output is rather ugly, I can actually have a doclet which outputs
Java source code. For my previous project (attempted to implement the entire
Java 8 library, about 4000 classes) used something such as this. However that
code is a bit old and rather ugly.

