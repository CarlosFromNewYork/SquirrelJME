# 2016/08/09

## 07:54

Thinking about it, `ByteArrayOutputStream` could use `ByteDeque` which would
minimize buffer allocations. I just need co-dependencies for that however.

## 07:58

So what I can do following this is create a class which holds the individual
blob buffers and creates a sort of table of contents that I can use. One thing
the output will need is some very simple bootstrap code which sets some values
and then jumps to the entry point. Just a single variable is needed and all it
would do is be told where the combined namespace blob is located. So that
would be about 4 or 5 MIPS instructions.

## 15:12

I should probably use sections regardless even though they technically are not
needed. This would be for objdump purposes.

## 15:47

QEMU just gives me invalid argument when trying to load the binary in user
mode Linux. I suppose it may be due to the lack of an entry point.

## 16:39

The current blob format is not going to work out. What I need instead is an
executable output of sorts wrapped to the cache manager which stores the
executable data in memory (can use `ByteDeque` for this). Having code and
data together will be quite nasty and lead to vulnerabilities with
specially crafted classes in the event there is an exploit. I would also want
a kind of symbol table that I can use to debug the actual output binaries if
the object format supports such things.

## 16:43

So `GenericClassWriter` just writes to a different format, say a
`GenericExecutable` kind of thing. Then the ELF loader would use such a thing
where it provides code, symbols, and other such things. `GenericExecutable`
would best be an interface although there can be a default implementation. I
would say that the best result would be to keep that in `jit-generic`. Then
the generic binary executable handlers in the VM can use a basic interface for
handling the blob format. Thinking about it, it can still be placed within the
cache, except the generic writer is a bit more sane (it keeps code and data
separated and has symbol information as needed). Then when that writer is
closed the stuff is written to the cache form. Then when it comes time to link,
a generic executable handler parses the raw byte data to provide access to the
binary data as appropriate (such as data and code sections). So really the
thing that needs to be changed is the `GenericNamespaceWriter` and the
`GenericClassWriter`. Then this way, the conditions of the generic writer does
not interfere with the writers in other cases.

