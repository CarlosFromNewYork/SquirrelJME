# 2016/05/27

## 08:04

Ok, so going to take a break from the UI and launcher code and instead perform
a refactor and moving around of all the stuff under `native-compiler`.

## 08:11

For the basic interpreter in the tests during the cleanup, I can have it base
off the kernel so that way I can develop a native interface which normal
programs would use and such. So calling `interpreter-tests` would create a
kernel process to launch applications with for example. This way I can still
work on the kernel and the native interfaces without worrying about the UI
layer. Once I get execution of code in place, I can use that to determine how
code should be started and such (the classpath loading and such). So calling
something such as `interpreter-tests` would just bypass the launcher
completely and not require it at all. Something I also need is a rename where
I can use regular expressions, so instead of renaming all the classes one by
one manually, I can use sed to do it.

## 10:19

The interpreter will come in a core portion which just has simple logic. Then
there would be extensions and implementations of the core which have the
actual interpreter loops. This way the same code can be shared and plugged in.
Also the verification of classes and such will be given to the `class-path`
package. Verification only makes sense when entire classes have been loaded
for the most part.

## 10:25

The user of the pure interpreter would be the test kernel, so similar to what
I have before except it has no launcher interface.

## 10:54

Going to remove the base NARF exception stuff soon.

## 10:56

Right now a bunch of code has been commented out and such and prefixed with
a TODO. The test kernel would initialize a kernel, and an interpreter while
parsing the command line to determine what to do. Then once the kernel and
interpreter it initialized, it will setup a `ClassPath` and then give that to
the kernel to be executed and such. The kernel implementation would then take
it and create a stand-alone interpreter instance which is linked to the kernel.

## 10:58

I could also remove the old console and the IPC UI since due to the changes in
the UI code and my future potential changes, they no longer compile properly
or even fit with the current code base.

## 11:02

Also going to remove the issue codes from the exceptions which came from the
NARF code.

