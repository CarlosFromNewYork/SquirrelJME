# 2016/05/28

## 09:50

Appears this class unit code will work out nicely for its purpose.

## 10:30

Now I just need to verify classes before they are used, which should not be
much of a problem at all. Generally the verification process will load other
classes and make sure that stuff such as circular extends and such are not
done. Other things would also be done also.

## 11:17

I could actually use JavaDoc for every single class and package.

## 15:31

Private method invocations use `invokespecial` because private methods are not
inherited.

## 18:34

The **can access** check can likely go into `ClassPath` or similar. It needs
every single class to be visible for the most part before access checks can
be performed and such however. Well, generally the access check would be given
two accessible objects. So this code can just go into the accessible object
however `static` in `interface`s is not supported. So there could just be an
accessibility checker and such.

## 18:45

Personally, I wish fossil had a grep of sorts, however if I go back into the
past far enough I should be able to find a `canAccess` variant. It should be
in the lookup actually.

## 18:49

It cannot go into the class interface, it has to be in `ClassPath`. There is
a need to lookup classes for protected and such to determine if something is
an instance.

## 20:10

Thinking about the kernel for the test interpreter. Does the kernel run outside
of the interpreter or does it run inside of it?

