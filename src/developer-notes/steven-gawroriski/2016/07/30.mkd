# 2016/07/30

## 00:42

There should probably be a limit of 65,536 strings in a single namespace.

## 00:58

Seems no output ZIP is written, I suppose I have missed that.

## 13:14

I would like TAS-support in emulators, but perhaps I am thinking too much into
it. The emulator should be as simple as possible but good enough where it could
run average programs that are not special in a way. Something I can do is make
it where it can be handled like a normal Java method so to speak. So you can
call main on a regular C method where it returns an `int`.

## 13:37

Ok, so what I can use is a `DeviceManager` which manages classes which act as
`BasicDevice`. Perhaps `AttachmentManager` might work better. Basically there
would be a generic manager which has device groups such as block devices,
virtual file systems, and other such things. When the emulator is initialized
it can setup a given manager. I would then suppose that there would be emulator
managed attachments and user managed ones.

## 13:40

Emulators can have groups of processes so to speak and possibly switch between
them manually or automatically. So what I need is essentially an interface
that is used as a display output so to speak.

## 15:49

I need a reverse resolution where I can open files and access them as blocks
of data of sorts without having lookup each time.

## 16:19

I should make it so the emulator can run another binary and not the one that is
in the distributed ZIP and with custom arguments.

## 16:28

Then this way, I can test arbitrary executables using the target emulation
system without worrying about setting up another emulator interface.

## 17:57

Much of the emulator logic will be very much the same between all targets, so
I should just have a generic emulation method that just creates the emulator
and performs any needed initialization, if it has been performed.

