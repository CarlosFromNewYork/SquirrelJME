# Error Codes

Error codes consist of ASCII characters and are limited to 4 characters. The
first two characters are the prefix, followed by a base-36 index starting from
`00` and ending at `zz` indicating the sub-type of the message. The first two
characters should be uppercase while the index should be lowercase.

The layout is as follows:

 * `CODE` -- The major description error code.
   * Any optional arguments which are supplied with the code to give some
     extra detail.

# General Codes

These codes do not have a index meaning and are meant to be short.

 * `BAOB` -- Byte array values out of bounds.
 * `FEOF` -- End of file reached.
 * `IOOB` -- Index out of bounds.
   * Optional index.
 * `NARG` -- Null arguments passed to method. This is specified and is used
   to differentiate from `NullPointerException` which might not appear in
   normal code.
 * `NSEE` -- No more elements remain in the iteration, stack, or queue.
 * `RORO` -- Attempted to write a read-only iteration, collection, or other
   type of storage.
 * `TODO` -- Incomplete code.
 * `WTFX` -- Code that should not be executed has been executed. This may
   indicate that a bug exists, that the virtual machine is in a potentially
   damaged state, or there is memory corruption.

# `net.multiphasicapps.cache`

 * `CH01` -- Could not initialize the `Instantiable` because it has no nullary
   constructor, is abstract, an enumeration, an array, or has a inaccessible
   nullary constructor.
 * `CH02` -- The input class is not a `Instantiable`.

# `net.multiphasicapps.collections`

 * `XC01` -- Adding a value to the huffman tree has a value which sets bits
   which were not specified in the mask.
   * The input value.
   * The mask being used.
 * `XC02` -- Adding a value to the huffman tree has a mask which does not start
   at shift zero and has a zero gap (`0b1111011` is not a valid mask).
   * The input value.
   * The mask being used.
 * `XC03` -- Expected a zero or a one.
   * The input value.
 * `XC04` -- Huffman table modified.

# `net.multiphasicapps.descriptors`

 * `DS01` -- The input descriptor is blank.
 * `DS02` -- The input descriptor contains an illegal character.
   * The input descriptor.
   * The index of the illegal character.
   * The character which is not legal.
 * `DS03` -- Cannot get an identifier element from the binary name because it
   is not a valid index.
   * The index being obtained.
   * The number of elements.
 * `DS04` -- The class name cannot be represented as a binary name because
   it is an array.
   * The descriptor.
 * `DS05` -- The field symbol only contains array dimensions and no component
   type.
   * The descriptor.
 * `DS06` -- Unknown field symbol type specified.
   * The descriptor.
 * `DS07` -- Maximum array dimension size exceeded in field descriptor, there
   is a maximum limit to the dimension count.
   * The descriptor.
   * The read number of dimensions.
 * `DS08` -- Field symbol does not have a length of 1 for non-class based
   fields.
   * The input field symbol.
 * `DS09` -- The field descriptor which describes a class must end with a `;`.
   * The input field descriptor.
 * `DS0a` -- The method descriptor does not contain a return type.
   * The input method descriptor.
 * `DS0b` -- The method descriptor does not have a closing `)` followed by a
   return type.
   * The input method descriptor.
 * `DS0c` -- The method descriptor does not start with `(`.
   * The input method descriptor.
 * `DS0d` -- Method descriptors cannot contain an argument which would
   evaluate to `void`.
   * The input method descriptor.

# `net.multiphasicapps.hairball`

 * `HB01` -- A package has an illegal manifest.
   * The manifest which is not legal.

# `net.multiphasicapps.io`

 * `XI01` -- Adding a value to the bit compactor has a value which sets bits
   which were not specified in the mask.
   * The input value.
   * The mask being used.
 * `XI02` -- Adding a value to the bit compactor has a mask which does not
   start at shift zero and has a zero gap (`0b1111011` is not a valid mask).
   * The input value.
   * The mask being used.
 * `XI03` -- End of file reached reading input bytes for input bits.
 * `XI04` -- Reading of a value with a negative number of bits or one that
   exceeds the size of a 32-bit integer.
   * The number of bits requested for read.
 * `XI05` -- Reading of a value with a negative number of bits or one that
   exceeds the size of a 64-bit integer.
   * The number of bits requested for read.
 * `XI06` -- Adding a value to the bit circular buffer has a value which sets
   bits which were not specified in the mask.
   * The input value.
   * The mask being used.
 * `XI07` -- Adding a value to the bit circular buffer has a mask which does
   not start at shift zero and has a zero gap (`0b1111011` is not a valid
   mask).
   * The input value.
   * The mask being used.
 * `XI08` -- Not enough bits are available to read a value of a given bit
   size.
   * The number of requested bits (the higher value).
   * The number bits actually available (the lower value).
 * `XI09` -- Cannot increase the circular buffer queue size because it would
   overflow an integer (negative array sizes are illegal).
   * The current size of the queue.
 * `XI0a` -- The default circular buffer size was changed and it is not a power
   of two.
   * The specified default size.
 * `XI0b` -- Nothing is in the queue for reading.
 * `XI0c` -- Cannot add more bytes to the processor because it is currently in
   a finished state (there is no more input data).
 * `XI0d` -- Cannot remove a byte from the processor because it had previously
   failed.
 * `XI0e` -- The inflater is waiting for more data to be input before it will
   continue.
 * `XI0f` -- An unknown task was attempted to be executed by the inflater,
   which means there is an internal state failure.
 * `XI0g` -- Not enough bits were read by the inflater when there should have
   been bits.
 * `XI0h` -- A code length index (for swapping) is out of range of the maximum
   size that the code length table would be.
 * `XI0i` -- Normal inflater waiting for continue, this is not an error.
 * `XI0j` -- The inflater could not read from the byte window.
   * The distance into the past to start reading from.
   * The number of bytes to read.
 * `XI0k` -- Could not handle a deflation code because it is not valid.
   * The code attempted to be handled.
 * `XI0l` -- Illegal length code in inflate length sequence.
   * The length code which was read.
 * `XI0m` -- The dynamic huffman table contains too many code lengths.
   * The number of code lengths specified in the table.
 * `XI0n` -- Read the illegal header sequence from the deflate stream.
 * `XI0o` -- The compression length and its complement do not complement each
   other.
   * The length.
   * The complement of the length.
 * `XI0p` -- Cannot limit a stream to a negative number of bytes.
   * The negative length.
 * `XI0q` -- Expected to least a specific number of bytes in the input stream,
   however only an amount lower than that were actually read.
   * The minimum number of bytes to read.
   * The number of actual bytes in the stream.
 * `XI0r` -- The default sliding window size was changed and is no longer a
   power of two.
   * The non-power of two value.
 * `XI0s` -- The input sliding window size is negative or is not a power of
   two.
   * The non-power of two or negative value.
 * `XI0t` -- The calculated sliding window fragment size is not a poer of two.
   * The non-power of two value.
 * `XI0u` -- Cannot read from the sliding window because the read would
   exceed a bound of the sliding window.
   * The distance back to start from.
   * The number of bytes which were requested.
   * The actual number of bytes in the window.
 * `XI0v` -- Not enough input bits or the dynamic huffman tree is incomplete
   and a request was made to use data traverses runs off the tree.
 * `XI0w` -- Illegal code length when reading the dynamic huffman literal and
   distance code compressed tree.
   * The input code length.
 * `XI0x` -- Read a length which duplicates the last length, however the
   current length being read is the first one.
   * The attempted length to be read.
 * `XI0y` -- Write of a literal or distance code length has a repeat which
   exceeds the bounds of the output table.

# `net.multiphasicapps.interpreter`

 * `IN01` -- The class magic number is not valid.
   * The read magic number.
   * The number it is supposed to be.
 * `IN02` -- The class file is too new.
   * The class version.
   * The highest version it can be.
 * `IN03` -- Interfaces must be abstract.
   * The input flags.
 * `IN04` -- Interfaces cannot be super, final, or enums.
   * The input flags.
 * `IN05` -- Non-interface must not be an annotation.
   * The input flags.
 * `IN06` -- A class cannot be both final and abstract.
   * The input flags.
 * `IN07` -- A super class is not valid for this class.
   * The current class.
   * The super class.
 * `IN08` -- Expected the end of stream while reading the class file, however
   more data is available.
 * `IN09` -- While skipping class attributes, the end of the stream was
   reached.
 * `IN0a` -- Extra illegal flags are specified in the flag mask.
   * The input flags.
   * The flags which were not handled.
 * `IN0b` -- Flag mask does not contain a single bit.
   * The flag mask.
 * `IN0c` -- The property of a class version is not defined.
 * `IN0d` -- A reference to a constant pool entry is not within bounds when
   being referred to by another constant.
   * The referenced pool entry.
   * The number of elements in the constant pool.
 * `IN0e` -- The class name is not a valid symbol.
 * `IN0f` -- The UTF-8 constant entry in the constant pool of the class is not
   in the correct format.
 * `IN0g` -- The constant pool is empty.
 * `IN0h` -- `invokedynamic` is not supported.
 * `IN0i` -- The given constant pool tag is not valid.
   * The constant pool tag.
 * `IN0j` -- The entry at the given position in the constant pool was not of
   the expected class.
   * The index.
   * The expected class.
 * `IN0k` -- A mismatched engine was specified.
 * `IN0l` -- Expected a class by a name which is not legal.
   * The class which has an illegal name which was requested.
 * `IN0m` -- Requested an array with an illegal number of dimensions.
   * The requested array dimension count.
 * `IN0n` -- Read a class which has a different name than the one which was
   requested.
   * The expected class name to be loading.
   * The name of the class which was actually read.
 * `IN0o` -- Could not read the class.
   * The class attempted to be read.
 * `IN0p` -- The type from a name and type entry is not a field.
 * `IN0q` -- The type from a name and type entry is not a method.
 * `IN0r` -- The type from a name and type entry is not a valid field or method
   symbol.
 * `IN0s` -- The name from a name and type entry is not a valid identifier.
 * `IN0t` -- Adding a field or method which belong to another class.
 * `IN0u` -- Adding of a member which is not a field or a method.
 * `IN0v` -- Class flags not set.
 * `IN0w` -- A class file was already parsed by this loader.
 * `IN0x` -- The class name not set.
 * `IN0y` -- The super class name was not set.
 * `IN0z` -- The super class cannot be an array.
   * The attempted super class to set.
 * `IN10` -- Cannot implement an interface which is an array.
   * The attempted interface name to implement.
 * `IN11` -- While parsing the class file a duplicate implemented interface
   was specified.
   * The current set of interfaces.
   * The interface attempted to be inserted.
 * `IN12` -- The super class of a class cannot be itself.
   * The attempted super class to use.
 * `IN13` -- Cannot implement Object.
 * `IN14` -- Member flags not set.
 * `IN15` -- Member has multiple access flags (public, protected,
   and/or private) set.
   * The input flags.
 * `IN16` -- If a field is both final and volatile.
   * The input flags.
 * `IN17` -- If a method is abstract, it cannot have specific flags set.
   * The input flags.
 * `IN18` -- Native methods are not supported by this virtual machine.
 * `IN19` -- Private and default methods are not supported in interfaces due
   to CLDC 8 requiring a Java 7 virtual machine.
   * The method flags.
 * `IN1a` -- Illegal combination of method flags for the current class.
   * The method flags.
   * The class flags.
 * `IN1b` -- Illegal combination of method flags, regardless of the current
   class.
   * The method flags.
 * `IN1c` -- Fields in interfaces must be `public static final`.
   * The field flags.
   * The class flags.
 * `IN1d` -- Add of member where the associated key and the member key is
   not the same.
   * The key identifying the entry.
   * The key of the member.
 * `IN1e` -- Reached end of stream reading a chunked stream before the limit
   was reached.
 * `IN1f` -- Illegal code length in method.
   * The code length.
 * `IN1g` -- Byte code translation already performed.
 * `IN1h` -- Illegal opcode.
   * The opcode.
 * `IN1i` -- Count-limited input stream cannot have a negative limit.
   * The negative limit which was requsted.
 * `IN1j` -- Method has a negative or zero stack size or a negative
   * local variable count.
   * The number of locals.
   * The number of stack elements.
 * `IN1k` -- Unknown variable type index or field symbol.
   * The unknown type index or field symbol.
 * `IN1l` -- Cannot copy another state into this one if the size does not
   match.
   * The size of this state.
   * The size of the state that wants to be copied.
 * `IN1m` -- Sub-routine operations are not supported by any CLDC version,
   code compiled for JVMs before Java 6 require translation and inlining
   of their sub-routines by the J2ME post processor.
   * The used op-code.
 * `IN1n` -- The `invokedynamic` instruction is not supported. This means
   that lambdas and method handles are not supported. It is recommended to
   compile code for Java 7 instead of Java 8.
   * The used op-code.
 * `IN1o` -- Illegal native register counts, int must be `> 0` and float must
   be `>= 0`.
   * Integer register count.
   * Floating point register count.
 * `IN1p` -- Illegal native register size, they must both be multiples of 8.
   * Integer register size.
   * Floating point register size.
 * `IN1q` -- Zero or negative register sizes.
   * Integer register size.
   * Floating point register size.
 * `IN1r` -- End of stream reached reading the byte code of a class.
   * The number of bytes read.
   * The number of expected bytes.
 * `IN1s` -- Variable state list is not a stack.
 * `IN1t` -- Unknown StackMap/StackMapTable verification type.
   * The verification type ID.
 * `IN1u` -- Stack map table has chopped locals but there are not enough
   locals to chop.
   * The number of frames remaining.
 * `IN1v` -- Appending local variables, however not all of them could be
   appended.
   * The number of locals to be appended remaining.
 * `IN1w` -- Attempted to get the atom of the following instruction, however
   it would exceed the size of the program.
   * The following atom position which was attempted to be read.
 * `IN1x` -- The following entry on the local variable table is not TOP.
   * The position of the local.
   * The expected type.
   * The current atom.
 * `IN1y` -- Expected the local variable at a given position for loading onto
   the stack to be a specific type, but it was a different one.
   * The position of the local.
   * The expected type.
   * The type it really was.
   * The current atom.
 * `IN1z` -- Cannot obtain the next slot item because it would exceed the
   length of the variable set.
   * The desired slot which exceeds the bound (the number of slots).
 * `IN20` -- Index out of bounds while obtaining local or stack variable.

# `net.multiphasicapps.interpreter.local`

 * `LI01` -- No bootstrap classpaths were specified.
 * `LI02` -- The main class does not exist.
   * The class which is missing.
 * `LI03` -- The main class was found, however it lacks the main entry point or
   it is not public or static.
   * The class which lacks `public static void main(String...)`.
 * `LI04` -- The path separator does not constist of a single character (it is
   either blank or is two or more characters).
   * The input separator.
   * The specified property.
 * `LI05` -- Cannot specify `-jar` or `-classpath` multiple times.
 * `LI06` -- `-classpath` is missing an argument.
 * `LI07` -- `-jar` is missing an argument.
 * `LI08` -- Unknown command line switch.
   * The command line switch which was specified.
 * `LI09` -- Main class not specified on the command line.
 * `LI0a` -- The JAR manifest does not have the `Main-Class` attribute.

# `net.multiphasicapps.narf`

 * `NF01` -- If the input operation specified (opcode) is not within the value
   mask for operations.
   * The input bits.
 * `NF02` -- Unknown slot.
   * The unknown slot.
 * `NF03` -- The validity masks have unknown bits set.
   * The slot A validity mask.
   * The slot B validity mask.
 * `NF04` -- Chunk size is zero or negative.
   * The requested chunk size.
 * `NF05` -- Requested position is negative.
   * The requested position.
 * `NF06` -- Requested position exceeds the end of the buffer and is not the
   last byte.
   * The requested position.
   * The number of bytes in the entire buffer.
 * `NF07` -- The computed logical position in a chunk is outside of bounds.
   * Physical position.
   * Logical position.
   * Bytes in the chunk.

# `net.multiphasicapps.zips`

 * `ZP01` -- Attempted to read an array index from a structured type, however
   the element being read is not an array.
   * The index which was attempted to be read.
 * `ZP02` -- Attempted to read an array index from a structured type, however
   it is an array except the index is out of bounds.
   * The index which was attempted to be read.
   * The array length.
 * `ZP03` -- Short read, expected a given number of bytes except only a given
   number were actually read.
   * The number of expected bytes (the higher value) and the bytes actually
     read (the lower value).
 * `ZP04` -- The ZIP file contain a negative number of entries.
   * The negative value which was read, indicating the total entries within a
     ZIP file.
 * `ZP05` -- Attempted to read the file entry of a given directory entry in a
   ZIP, however it does not have an offset set (it starts at an unknown
   position).
   * The position it appears to be located at, may be an invalid value.
 * `ZP06` -- The ZIP file has no central directory or it could not be found.
 * `ZP07` -- Magic number mismatch,
   * Two values, where either one is the expected magic number and the other is
     the read magic number.
 * `ZP08` -- The ZIP file is too new and is not supported by this library.
   * The version of the ZIP (the higher value) and the maximum supported
     version which can be read (the lower value).
 * `ZP09` -- Expected to read a given number of entries, however a different
   number of entries were read.
   * Two values, where one is the number of expected entries while the other is
     the actual number of read entries.
 * `ZP0a` -- Attempted to open a directory as a file.
   * The directory which was attempted to be read as a file.
 * `ZP0b` -- Attempted to read file data which has an unknown compression
   algorithm.
   * The file which was attempted to be read.
   * The ZIP internal compression method.
 * `ZP0c` -- Read error reading central directory data.
 * `ZP0d` -- Could not read the ZIP file header table data.
 * `ZP0e` -- The IBM 437 byte to translate to UTF-16 is outside of range.
   * The byte to be translated.

# End of errors

