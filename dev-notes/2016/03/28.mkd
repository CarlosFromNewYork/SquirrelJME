# 2016/03/28

## 01:39

Figured out what that bl_count means.

## 01:42

For the sample input, I now have:

	DEBUG -- B=<0,3> H=        10
	DEBUG -- B=<1,3> H=        11
	DEBUG -- B=<2,3> H=       100
	DEBUG -- B=<3,3> H=       101
	DEBUG -- B=<4,3> H=       110
	DEBUG -- B=<5,2> H=         0
	DEBUG -- B=<6,4> H=      1110
	DEBUG -- B=<7,4> H=      1111

Which appears to be correct. I just need to figure out how this stuff is used
now that it is correct.

## 01:46

Also figured out how I can have a huffman tree just be based on an array of
sorts that kind of builds up as entries are added. I can probably use that
instead because it would be much smaller, although it does not have to be
limited to specific data types. Instead of having nodes for every part of the
tree I can instead just have an array of index references. Each index is in a
pair always, so the array is a power of two. If the uppermost bit is set then
a value is used, otherwise then a pointer is used instead. So basically it
would be in a linear jump fashion so to speak.

## 03:19

Using the new huffman code, need to figure out a way to find the associated
symbol and the bitmask, if applicable.

## 03:28

Appears a thunderstorm is approaching.

