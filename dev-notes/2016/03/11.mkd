# 2016/03/11

## 00:03

Brute force can work.

## 00:13

This initial value I have is rather difficult when it comes to elimination.

## 00:16

Actually, I could use what I have now as a kind of heuristic and have a spliced
off huffman tree which is in four parts. That would reduce the runtime memory
requirement so to speak. I would need to be in all active trees at the same
time however. If a rover falls off the tree then it is not that route. If I
were to visuallize the entire huffman tree and its routes.

## 08:48

I would not need a tree if I made a gigantic method which does comparisons on
all of the tree values. So basically it would just consist of branches. Then
it could exist in the ROM. I do wonder how big such a method would be though
since there are byte code limitations.

## 09:08

Well the gigantic method of ifs seems faster. The gigantic method of ifs is
about 3887 byte codes long. I could actually do better with it. Right now the
byte code is just getting the field every single time even though it is final,
I can just pass it to the method instead.

## 09:14

And having it invoke a method is 3038 bytes of byte code.

## 09:24

I can also compact the giant method a bit by removing some of the leaves since
now I notice a pattern to the bits.

## 09:47

The byte code count really goes down when I compact a large portion of the
tree into a single addition.

## 09:50

For now.

	2824  2016-03-11 09:46   net/multiphasicapps/io/DeflateFixedHuffman.class

Then removing some very large branches

	1360  2016-03-11 09:50   net/multiphasicapps/io/DeflateFixedHuffman.class

